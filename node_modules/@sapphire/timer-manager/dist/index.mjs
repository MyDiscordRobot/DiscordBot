var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/lib/TimerManager.ts
var TimerManager = class extends null {
  static setTimeout(fn, delay, ...args) {
    const timeout = setTimeout(() => {
      this.storedTimeouts.delete(timeout);
      fn(...args);
    }, delay);
    this.storedTimeouts.add(timeout);
    return timeout;
  }
  static clearTimeout(timeout) {
    clearTimeout(timeout);
    this.storedTimeouts.delete(timeout);
  }
  static setInterval(fn, delay, ...args) {
    const interval = setInterval(fn, delay, ...args);
    this.storedIntervals.add(interval);
    return interval;
  }
  static clearInterval(interval) {
    clearInterval(interval);
    this.storedIntervals.delete(interval);
  }
  static destroy() {
    for (const i of this.storedTimeouts)
      clearTimeout(i);
    for (const i of this.storedIntervals)
      clearInterval(i);
    this.storedTimeouts.clear();
    this.storedIntervals.clear();
  }
};
__name(TimerManager, "TimerManager");
__publicField(TimerManager, "storedTimeouts", /* @__PURE__ */ new Set());
__publicField(TimerManager, "storedIntervals", /* @__PURE__ */ new Set());
export {
  TimerManager
};
//# sourceMappingURL=index.mjs.map