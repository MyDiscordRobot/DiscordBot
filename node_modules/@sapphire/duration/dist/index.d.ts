/**
 * Display the duration
 * @param duration The duration in milliseconds to parse and display
 * @param assets The language assets
 */
declare class DurationFormatter {
    units: DurationFormatAssetsTime;
    constructor(units?: DurationFormatAssetsTime);
    format(duration: number, precision?: number, { left: leftSeparator, right: rightSeparator }?: DurationFormatSeparators): string;
}
interface DurationFormatSeparators {
    left?: string;
    right?: string;
}
interface DurationFormatAssetsUnit extends Record<number, string> {
    DEFAULT: string;
}
interface DurationFormatAssetsTime {
    [TimeTypes.Second]: DurationFormatAssetsUnit;
    [TimeTypes.Minute]: DurationFormatAssetsUnit;
    [TimeTypes.Hour]: DurationFormatAssetsUnit;
    [TimeTypes.Day]: DurationFormatAssetsUnit;
    [TimeTypes.Week]: DurationFormatAssetsUnit;
    [TimeTypes.Month]: DurationFormatAssetsUnit;
    [TimeTypes.Year]: DurationFormatAssetsUnit;
}

declare enum Time {
    Millisecond = 1,
    Second = 1000,
    Minute = 60000,
    Hour = 3600000,
    Day = 86400000,
    Month = 2628000000,
    Year = 31536000000
}
/**
 * The supported time types
 */
declare enum TimeTypes {
    Second = "second",
    Minute = "minute",
    Hour = "hour",
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year"
}
declare const DEFAULT_UNITS: DurationFormatAssetsTime;
declare const DEFAULT_SEPARATORS: DurationFormatSeparators;

/**
 * Converts duration strings into ms and future dates
 */
declare class Duration {
    /**
     * The offset
     */
    offset: number;
    /**
     * Create a new Duration instance
     * @param pattern The string to parse
     */
    constructor(pattern: string);
    /**
     * Get the date from now
     */
    get fromNow(): Date;
    /**
     * Get the date from
     * @param date The Date instance to get the date from
     */
    dateFrom(date: Date): Date;
    /**
     * The RegExp used for the pattern parsing
     */
    private static readonly kPatternRegex;
    /**
     * The RegExp used for removing commas
     */
    private static readonly kCommaRegex;
    /**
     * The RegExp used for replacing a/an with 1
     */
    private static readonly kAanRegex;
    /**
     * Parse the pattern
     * @param pattern The pattern to parse
     */
    private static parse;
}

export { DEFAULT_SEPARATORS, DEFAULT_UNITS, Duration, DurationFormatAssetsTime, DurationFormatAssetsUnit, DurationFormatSeparators, DurationFormatter, Time, TimeTypes };
