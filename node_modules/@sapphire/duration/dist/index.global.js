"use strict";
var SapphireDuration = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // src/index.ts
  var src_exports = {};
  __export(src_exports, {
    DEFAULT_SEPARATORS: () => DEFAULT_SEPARATORS,
    DEFAULT_UNITS: () => DEFAULT_UNITS,
    Duration: () => Duration,
    DurationFormatter: () => DurationFormatter,
    Time: () => Time,
    TimeTypes: () => TimeTypes
  });

  // src/lib/constants.ts
  var Time = /* @__PURE__ */ ((Time2) => {
    Time2[Time2["Millisecond"] = 1] = "Millisecond";
    Time2[Time2["Second"] = 1e3] = "Second";
    Time2[Time2["Minute"] = 6e4] = "Minute";
    Time2[Time2["Hour"] = 36e5] = "Hour";
    Time2[Time2["Day"] = 864e5] = "Day";
    Time2[Time2["Month"] = 2628e6] = "Month";
    Time2[Time2["Year"] = 31536e6] = "Year";
    return Time2;
  })(Time || {});
  var TimeTypes = /* @__PURE__ */ ((TimeTypes2) => {
    TimeTypes2["Second"] = "second";
    TimeTypes2["Minute"] = "minute";
    TimeTypes2["Hour"] = "hour";
    TimeTypes2["Day"] = "day";
    TimeTypes2["Week"] = "week";
    TimeTypes2["Month"] = "month";
    TimeTypes2["Year"] = "year";
    return TimeTypes2;
  })(TimeTypes || {});
  var DEFAULT_UNITS = {
    ["year" /* Year */]: {
      1: "year",
      DEFAULT: "years"
    },
    ["month" /* Month */]: {
      1: "month",
      DEFAULT: "months"
    },
    ["week" /* Week */]: {
      1: "week",
      DEFAULT: "weeks"
    },
    ["day" /* Day */]: {
      1: "day",
      DEFAULT: "days"
    },
    ["hour" /* Hour */]: {
      1: "hour",
      DEFAULT: "hours"
    },
    ["minute" /* Minute */]: {
      1: "minute",
      DEFAULT: "minutes"
    },
    ["second" /* Second */]: {
      1: "second",
      DEFAULT: "seconds"
    }
  };
  var DEFAULT_SEPARATORS = {
    left: " ",
    right: " "
  };

  // src/lib/Duration.ts
  var tokens = /* @__PURE__ */ new Map([
    ["nanosecond", 1 / 1e6],
    ["nanoseconds", 1 / 1e6],
    ["ns", 1 / 1e6],
    ["millisecond", 1],
    ["milliseconds", 1],
    ["ms", 1],
    ["second", 1e3],
    ["seconds", 1e3],
    ["sec", 1e3],
    ["secs", 1e3],
    ["s", 1e3],
    ["minute", 1e3 * 60],
    ["minutes", 1e3 * 60],
    ["min", 1e3 * 60],
    ["mins", 1e3 * 60],
    ["m", 1e3 * 60],
    ["hour", 1e3 * 60 * 60],
    ["hours", 1e3 * 60 * 60],
    ["hr", 1e3 * 60 * 60],
    ["hrs", 1e3 * 60 * 60],
    ["h", 1e3 * 60 * 60],
    ["day", 1e3 * 60 * 60 * 24],
    ["days", 1e3 * 60 * 60 * 24],
    ["d", 1e3 * 60 * 60 * 24],
    ["week", 1e3 * 60 * 60 * 24 * 7],
    ["weeks", 1e3 * 60 * 60 * 24 * 7],
    ["wk", 1e3 * 60 * 60 * 24 * 7],
    ["wks", 1e3 * 60 * 60 * 24 * 7],
    ["w", 1e3 * 60 * 60 * 24 * 7],
    ["month", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["months", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["b", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["mo", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["year", 1e3 * 60 * 60 * 24 * 365.25],
    ["years", 1e3 * 60 * 60 * 24 * 365.25],
    ["yr", 1e3 * 60 * 60 * 24 * 365.25],
    ["yrs", 1e3 * 60 * 60 * 24 * 365.25],
    ["y", 1e3 * 60 * 60 * 24 * 365.25]
  ]);
  var _Duration = class {
    constructor(pattern) {
      __publicField(this, "offset");
      this.offset = _Duration.parse(pattern.toLowerCase());
    }
    get fromNow() {
      return this.dateFrom(new Date());
    }
    dateFrom(date) {
      return new Date(date.getTime() + this.offset);
    }
    static parse(pattern) {
      let result = 0;
      let valid = false;
      pattern.replace(_Duration.kCommaRegex, "").replace(_Duration.kAanRegex, "1").replace(_Duration.kPatternRegex, (_, i, units) => {
        const token = tokens.get(units);
        if (token !== void 0) {
          result += Number(i) * token;
          valid = true;
        }
        return "";
      });
      return valid ? result : NaN;
    }
  };
  var Duration = _Duration;
  __name(Duration, "Duration");
  __publicField(Duration, "kPatternRegex", /(-?\d*\.?\d+(?:e[-+]?\d+)?)\s*([a-zÎ¼]*)/gi);
  __publicField(Duration, "kCommaRegex", /,/g);
  __publicField(Duration, "kAanRegex", /\ban?\b/gi);

  // src/lib/DurationFormatter.ts
  var kTimeDurations = [
    ["year" /* Year */, 31536e6],
    ["month" /* Month */, 2628e6],
    ["week" /* Week */, 1e3 * 60 * 60 * 24 * 7],
    ["day" /* Day */, 1e3 * 60 * 60 * 24],
    ["hour" /* Hour */, 1e3 * 60 * 60],
    ["minute" /* Minute */, 1e3 * 60],
    ["second" /* Second */, 1e3]
  ];
  var DurationFormatter = class {
    constructor(units = DEFAULT_UNITS) {
      this.units = units;
    }
    format(duration, precision = 7, {
      left: leftSeparator = DEFAULT_SEPARATORS.left,
      right: rightSeparator = DEFAULT_SEPARATORS.right
    } = DEFAULT_SEPARATORS) {
      const output = [];
      const negative = duration < 0;
      if (negative)
        duration *= -1;
      for (const [type, timeDuration] of kTimeDurations) {
        const division = duration / timeDuration;
        if (division < 1)
          continue;
        const floored = Math.floor(division);
        duration -= floored * timeDuration;
        output.push(addUnit(floored, this.units[type], leftSeparator));
        if (output.length >= precision)
          break;
      }
      return `${negative ? "-" : ""}${output.join(rightSeparator) || addUnit(0, this.units.second, leftSeparator)}`;
    }
  };
  __name(DurationFormatter, "DurationFormatter");
  function addUnit(time, unit, separator) {
    if (Reflect.has(unit, time))
      return `${time}${separator}${Reflect.get(unit, time)}`;
    return `${time}${separator}${unit.DEFAULT}`;
  }
  __name(addUnit, "addUnit");
  return __toCommonJS(src_exports);
})();
//# sourceMappingURL=index.global.js.map